

----- Page 1 -----
Indexing


----- Page 2 -----
+ A database consists of a huge amount of data.
* The data is grouped within a table in RDBMS, and each table has related records.

* Auser can see that the data is stored in the form of tables, but in actuality, this huge
amount of data is stored in physical memory in the form of files.

* What is a File?

- A file is named a collection of related information that is recorded on secondary storage
such as magnetic disks, magnetic tapes, and optical disks.
+ What is File Organization?
* Storing the files in a certain order is called File Organization

* The Objective of File Organization
* It helps in the faster selection of records i.e. it makes the process faster.
+ Different Operations like inserting, deleting, and updating different records are faster and easier.
+ It prevents us from inserting duplicate records via various operations.
+ Ithelps in storing the records or the data very efficiently at a minimal cost



----- Page 3 -----
Sequential File Organization
* The easiest method for file Organization is the Sequential method.
* In this method, the file is stored one after another in a sequential manner.
* There are two ways to implement this method:
1. Pile File Method

2. Sorted File Method

1. Pile File Method » ] - | — al a

* This method is quite simple, in which we store the records $ t

in a sequence i.e. one after the other in the order in which they Starting of The End of th

are inserted into the tables. a =

Insertion of the new record: Let the R1, R3, and so on up to R5 and R4

be four records in the sequence. Here, records are nothing but a row in any table.

Suppose a new record R2 has to be inserted in the sequence, ri | R3 rs| ra

then it is simply placed at the end of the file. 1 t =
‘Starting of The End of the

File Pe New record


----- Page 4 -----
2. Sorted File Method

* In this method, As the name itself suggests whenever a new record
has to be inserted, it is always inserted in a sorted (ascending or ra | rs w| RB
descending) manner. t t
+ The sorting of records may be based on any primary key or any R2
other key. . y Y PRAMATY REY OF ANY starting of The End of the
File File New record

Insertion of the new record:

Let us assume that there is a preexisting sorted sequence ale wle
of four records R1, R3, and so on up to R7 and R8.

Suppose a new record R2 has to be inserted in the sequence, sanhpotthe wa on 5
then it will be inserted at the end of the file and then it will sort the File File

sequence.


----- Page 5 -----
Advantages of Sequential File Organization

+ Fast and efficient method for huge amounts of data.

* Simple design.

* Files can be easily stored in magnetic tapes i.e. cheaper storage mechanism.

Disadvantages of Sequential File Organization

+ Time wastage as we cannot jump on a particular record that is required, but we have to move ina
sequential manner which takes our time.

+ The sorted file method is inefficient as it takes time and space for sorting records.


----- Page 6 -----
Hashing Data Structure

0

+ Hashing is an efficient technique to directly search the location of desired data on the disk
+ Data is stored at the data blocks whose address is generated by using a hash function
+ The memory location where these records are stored is called a data block or data bucket.


----- Page 7 -----
+ Hashing is a technique or process of mapping keys, and values into the hash table by using
a hash function

* Itis done for faster access to elements. The efficiency of mapping depends on the efficiency of the
hash function used.

* Let a hash function H(x) maps the value x at the index x%10 in an Array. For example if the list
of values is [11,12,13,14,15] it will be stored at positions {1,2,3,4,5} in the array or Hash table
respectively.

Hash Table 11 | 12| 13 | 14]15 |



----- Page 8 -----
Hash File Organization
+ Data bucket — Data buckets are the memory locations where the records are stored. These buckets
are also considered Units of Storage.

+ Hash Function — The hash function is a mapping function that maps all the sets of search keys to
the actual record address. Generally, the hash function uses the primary key to generate the hash
index — the address of the data block. The hash function can be a simple mathematical function to
any complex mathematical function.

* Hash Index-The prefix of an entire hash value is taken as a hash index.

Key Values Hash Table

key_valuel

key_value3

key_value2 Hash Fuction

key_value2

key_value3 key_valuel



----- Page 9 -----
Types of Hashing:

Static Dynamic
Hashing Hashing



----- Page 10 -----
Hash File Organization -Static Hashing

In static hashing, when a search-key value is provided, the hash function always computes the same
address. For example, if we want'to generate an address for STUDENT ID = 104 using a mod
io) hash function, it always results in the same bucket address 4. There will not be any changes to the

ucket address here. Hence a number of data buckets in the memory for this static hashing remain
constant throughout.

Operations:

Insertion — When a new record is inserted into the table, The hash function h generates a bucket
address for the new record based on its hash key K. Bucket address = h(K)

Searching — When a record needs to be searched, The same hash function is used to retrieve the
bucket address for the record. For Example, if we want to retrieve the whole record for ID 104, and if
the hash function is mod (5) on that ID, the bucket address generated would be 4. Then we will
directly got to address 4 and retrieve the whole record for ID 104. Here ID acts as a hash key.

Deletion — If we want to delete a record, Using the hash function we will first fetch the record which
is supposed to be deleted. Then we will remove the records for that address in memory.

Updation — The data record that needs to be updated is first searched using the hash function, and
then the data record is updated.



----- Page 11 -----
*+ Now, If we want to insert some new records into the file But the data bucket address generated by the hash function is not empty or the data already
exists in that address. This becomes a critical situation to handle. This situation is static hashing is called bucket overflow. How will we insert data in
this case? There are several methods provided to overcome this situation.

+ Some commonly used methods are discussed below:

ara sucaeTs

Open Hashing .

+ Inthe Open hashing method, the next available data block is used to —
108

enter the new record, instead of overwriting the older one. para cons

ae
‘This method is also called linear probing. a a eT Fr] »)
= nas [as]

+ For example, D3 is a new record that needs to be inserted, 151
the hash function generates the address as 105. =»)
162
But it is already full, So the system searches the next available data bucket, 123, and a
Closed hashing can vcr

+ Inthe Closed hashing method, a new data bucket is allocated with the same address

and is linked to it after the full data bucket. This method is also known as overflow chait

+ For example, we have to insert a new record D3 into the tables.
The static hash function generates the data bucket address as 105. ome

But this bucket is full to store the new data. In this case, a new data bucket is added at the end of the 105

S|B/B/ 8/25

data bucket and is linked to it. The new record D3 is inserted into the new bucket. Ge) 12


----- Page 12 -----
Hash File Organization -Dynamic Hashing

* The drawback of static hashing is that it does not expand or shrink dynamically as the size of the database
grows or shrinks.

+ In Dynamic hashing, data buckets grow or shrink (added or removed dynamically) as the records increase or
decrease. Dynamic hashing is also known as extended hashing.

* In dynamic hashing, the hash function is made to produce a large number of values.
+ For Example, there are three data records D1, D2, and D3.
* The hash function generates three addresses 1001, 0101, and 1010 respectively.

* This method of storing considers only part of this address — especially only the first bit to store the data. So it
tries to load three of them at addresses 0 and 1.

h(D1) -> 1001

h(D2) -> 0101 D1 0
h(D3) -> 1010 D2
D3 1



----- Page 13 -----
h(D1) -> 1001

h(D2) -> 0101 D1 0
h(D3) -> 1010 D2
D3 1

+ But the problem is that No bucket address is remaining for D3. The bucket has to
grow dynamically to accommodate D3.

* So it changes the address to have 2 bits rather than | bit, and then it updates the
existing data to have a 2-bit address. Then it tries to accommodate D3.

00
h(D1) -> 1001
h(D2) -> 0101 o1 01
h(D3) -> 1010 D2
D3 10

Ea



----- Page 14 -----
B+ Tree

uses a tree-like structure to store records in a File.

It uses the concept of Key
to sort the records

dexing where the primary key is used

For each primary key, an index value is generated and mapped with
the record,

An index of a record is the address of the record in the file.

B+ Tree is very similar to a binary search tree, with the only
difference being that instead of just two children, it can have more
than two

All the information is stored in a leaf node and the intermediate
nodes act as a pointer to the leaf nodes.

The information in leaf nodes always remaii
linked list.

a sorted sequential

In the above diagram, 56 is the root node which is also called the
main node of the tree.

The intermediate nodes here, just consist of the address of leaf
nodes. They do not contain any actual records.

Leaf nodes consist of the actual record. All leaf nodes are balanced.

(«[2]8) (e]

Advantages of B+ Tree File Organization

‘Tree traversal is easier and faster.

‘Searching becomes easy as all records are stored only in
leaf nodes and are sorted in sequentially linked lists.
There is no restriction on B+ tree size. It may
grow/shrink as the size of the data increases/decreases

